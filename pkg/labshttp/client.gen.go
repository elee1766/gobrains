// Package labshttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package labshttp

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GetSimilarRecordingsJsonParamsAlgorithm.
const (
	GetSimilarRecordingsJsonParamsAlgorithmSessionBasedDays9000Session300Contribution5Threshold15Limit50Skip30 GetSimilarRecordingsJsonParamsAlgorithm = "session_based_days_9000_session_300_contribution_5_threshold_15_limit_50_skip_30"
)

// Defines values for PostSimilarRecordingsJsonJSONBodyAlgorithm.
const (
	PostSimilarRecordingsJsonJSONBodyAlgorithmSessionBasedDays9000Session300Contribution5Threshold15Limit50Skip30 PostSimilarRecordingsJsonJSONBodyAlgorithm = "session_based_days_9000_session_300_contribution_5_threshold_15_limit_50_skip_30"
)

// GetArtistCountryCodeFromArtistMbidJsonParams defines parameters for GetArtistCountryCodeFromArtistMbidJson.
type GetArtistCountryCodeFromArtistMbidJsonParams struct {
	ArtistMbid openapi_types.UUID `form:"artist_mbid" json:"artist_mbid"`
}

// PostArtistCountryCodeFromArtistMbidJsonJSONBody defines parameters for PostArtistCountryCodeFromArtistMbidJson.
type PostArtistCountryCodeFromArtistMbidJsonJSONBody = []struct {
	ArtistMbid openapi_types.UUID `json:"artist_mbid"`
}

// GetBulkTagLookupJsonParams defines parameters for GetBulkTagLookupJson.
type GetBulkTagLookupJsonParams struct {
	RecordingMbid openapi_types.UUID `form:"recording_mbid" json:"recording_mbid"`
}

// PostBulkTagLookupJsonJSONBody defines parameters for PostBulkTagLookupJson.
type PostBulkTagLookupJsonJSONBody = []struct {
	RecordingMbid openapi_types.UUID `json:"recording_mbid"`
}

// GetSimilarRecordingsJsonParams defines parameters for GetSimilarRecordingsJson.
type GetSimilarRecordingsJsonParams struct {
	RecordingMbids openapi_types.UUID                      `form:"recording_mbids" json:"recording_mbids"`
	Algorithm      GetSimilarRecordingsJsonParamsAlgorithm `form:"algorithm" json:"algorithm"`
}

// GetSimilarRecordingsJsonParamsAlgorithm defines parameters for GetSimilarRecordingsJson.
type GetSimilarRecordingsJsonParamsAlgorithm string

// PostSimilarRecordingsJsonJSONBody defines parameters for PostSimilarRecordingsJson.
type PostSimilarRecordingsJsonJSONBody = []struct {
	Algorithm      PostSimilarRecordingsJsonJSONBodyAlgorithm `json:"algorithm"`
	RecordingMbids []openapi_types.UUID                       `json:"recording_mbids"`
}

// PostSimilarRecordingsJsonJSONBodyAlgorithm defines parameters for PostSimilarRecordingsJson.
type PostSimilarRecordingsJsonJSONBodyAlgorithm string

// GetSpotifyIdFromMbidJsonParams defines parameters for GetSpotifyIdFromMbidJson.
type GetSpotifyIdFromMbidJsonParams struct {
	RecordingMbid openapi_types.UUID `form:"recording_mbid" json:"recording_mbid"`
}

// PostSpotifyIdFromMbidJsonJSONBody defines parameters for PostSpotifyIdFromMbidJson.
type PostSpotifyIdFromMbidJsonJSONBody = []struct {
	RecordingMbid openapi_types.UUID `json:"recording_mbid"`
}

// GetSpotifyIdFromMetadataJsonParams defines parameters for GetSpotifyIdFromMetadataJson.
type GetSpotifyIdFromMetadataJsonParams struct {
	ArtistName  string `form:"artist_name" json:"artist_name"`
	ReleaseName string `form:"release_name" json:"release_name"`
	TrackName   string `form:"track_name" json:"track_name"`
}

// PostSpotifyIdFromMetadataJsonJSONBody defines parameters for PostSpotifyIdFromMetadataJson.
type PostSpotifyIdFromMetadataJsonJSONBody = []struct {
	ArtistName  string `json:"artist_name"`
	ReleaseName string `json:"release_name"`
	TrackName   string `json:"track_name"`
}

// PostArtistCountryCodeFromArtistMbidJsonJSONRequestBody defines body for PostArtistCountryCodeFromArtistMbidJson for application/json ContentType.
type PostArtistCountryCodeFromArtistMbidJsonJSONRequestBody = PostArtistCountryCodeFromArtistMbidJsonJSONBody

// PostBulkTagLookupJsonJSONRequestBody defines body for PostBulkTagLookupJson for application/json ContentType.
type PostBulkTagLookupJsonJSONRequestBody = PostBulkTagLookupJsonJSONBody

// PostSimilarRecordingsJsonJSONRequestBody defines body for PostSimilarRecordingsJson for application/json ContentType.
type PostSimilarRecordingsJsonJSONRequestBody = PostSimilarRecordingsJsonJSONBody

// PostSpotifyIdFromMbidJsonJSONRequestBody defines body for PostSpotifyIdFromMbidJson for application/json ContentType.
type PostSpotifyIdFromMbidJsonJSONRequestBody = PostSpotifyIdFromMbidJsonJSONBody

// PostSpotifyIdFromMetadataJsonJSONRequestBody defines body for PostSpotifyIdFromMetadataJson for application/json ContentType.
type PostSpotifyIdFromMetadataJsonJSONRequestBody = PostSpotifyIdFromMetadataJsonJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetArtistCountryCodeFromArtistMbidJson request
	GetArtistCountryCodeFromArtistMbidJson(ctx context.Context, params *GetArtistCountryCodeFromArtistMbidJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArtistCountryCodeFromArtistMbidJsonWithBody request with any body
	PostArtistCountryCodeFromArtistMbidJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArtistCountryCodeFromArtistMbidJson(ctx context.Context, body PostArtistCountryCodeFromArtistMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkTagLookupJson request
	GetBulkTagLookupJson(ctx context.Context, params *GetBulkTagLookupJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBulkTagLookupJsonWithBody request with any body
	PostBulkTagLookupJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBulkTagLookupJson(ctx context.Context, body PostBulkTagLookupJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSimilarRecordingsJson request
	GetSimilarRecordingsJson(ctx context.Context, params *GetSimilarRecordingsJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSimilarRecordingsJsonWithBody request with any body
	PostSimilarRecordingsJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSimilarRecordingsJson(ctx context.Context, body PostSimilarRecordingsJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpotifyIdFromMbidJson request
	GetSpotifyIdFromMbidJson(ctx context.Context, params *GetSpotifyIdFromMbidJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpotifyIdFromMbidJsonWithBody request with any body
	PostSpotifyIdFromMbidJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSpotifyIdFromMbidJson(ctx context.Context, body PostSpotifyIdFromMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpotifyIdFromMetadataJson request
	GetSpotifyIdFromMetadataJson(ctx context.Context, params *GetSpotifyIdFromMetadataJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpotifyIdFromMetadataJsonWithBody request with any body
	PostSpotifyIdFromMetadataJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSpotifyIdFromMetadataJson(ctx context.Context, body PostSpotifyIdFromMetadataJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetArtistCountryCodeFromArtistMbidJson(ctx context.Context, params *GetArtistCountryCodeFromArtistMbidJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistCountryCodeFromArtistMbidJsonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistCountryCodeFromArtistMbidJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistCountryCodeFromArtistMbidJsonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistCountryCodeFromArtistMbidJson(ctx context.Context, body PostArtistCountryCodeFromArtistMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistCountryCodeFromArtistMbidJsonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkTagLookupJson(ctx context.Context, params *GetBulkTagLookupJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkTagLookupJsonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBulkTagLookupJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBulkTagLookupJsonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBulkTagLookupJson(ctx context.Context, body PostBulkTagLookupJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBulkTagLookupJsonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimilarRecordingsJson(ctx context.Context, params *GetSimilarRecordingsJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSimilarRecordingsJsonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSimilarRecordingsJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSimilarRecordingsJsonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSimilarRecordingsJson(ctx context.Context, body PostSimilarRecordingsJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSimilarRecordingsJsonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpotifyIdFromMbidJson(ctx context.Context, params *GetSpotifyIdFromMbidJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpotifyIdFromMbidJsonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpotifyIdFromMbidJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotifyIdFromMbidJsonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpotifyIdFromMbidJson(ctx context.Context, body PostSpotifyIdFromMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotifyIdFromMbidJsonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpotifyIdFromMetadataJson(ctx context.Context, params *GetSpotifyIdFromMetadataJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpotifyIdFromMetadataJsonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpotifyIdFromMetadataJsonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotifyIdFromMetadataJsonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpotifyIdFromMetadataJson(ctx context.Context, body PostSpotifyIdFromMetadataJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotifyIdFromMetadataJsonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetArtistCountryCodeFromArtistMbidJsonRequest generates requests for GetArtistCountryCodeFromArtistMbidJson
func NewGetArtistCountryCodeFromArtistMbidJsonRequest(server string, params *GetArtistCountryCodeFromArtistMbidJsonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artist-country-code-from-artist-mbid/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artist_mbid", runtime.ParamLocationQuery, params.ArtistMbid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArtistCountryCodeFromArtistMbidJsonRequest calls the generic PostArtistCountryCodeFromArtistMbidJson builder with application/json body
func NewPostArtistCountryCodeFromArtistMbidJsonRequest(server string, body PostArtistCountryCodeFromArtistMbidJsonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArtistCountryCodeFromArtistMbidJsonRequestWithBody(server, "application/json", bodyReader)
}

// NewPostArtistCountryCodeFromArtistMbidJsonRequestWithBody generates requests for PostArtistCountryCodeFromArtistMbidJson with any type of body
func NewPostArtistCountryCodeFromArtistMbidJsonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artist-country-code-from-artist-mbid/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBulkTagLookupJsonRequest generates requests for GetBulkTagLookupJson
func NewGetBulkTagLookupJsonRequest(server string, params *GetBulkTagLookupJsonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bulk-tag-lookup/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recording_mbid", runtime.ParamLocationQuery, params.RecordingMbid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBulkTagLookupJsonRequest calls the generic PostBulkTagLookupJson builder with application/json body
func NewPostBulkTagLookupJsonRequest(server string, body PostBulkTagLookupJsonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBulkTagLookupJsonRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBulkTagLookupJsonRequestWithBody generates requests for PostBulkTagLookupJson with any type of body
func NewPostBulkTagLookupJsonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bulk-tag-lookup/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSimilarRecordingsJsonRequest generates requests for GetSimilarRecordingsJson
func NewGetSimilarRecordingsJsonRequest(server string, params *GetSimilarRecordingsJsonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/similar-recordings/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recording_mbids", runtime.ParamLocationQuery, params.RecordingMbids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm", runtime.ParamLocationQuery, params.Algorithm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSimilarRecordingsJsonRequest calls the generic PostSimilarRecordingsJson builder with application/json body
func NewPostSimilarRecordingsJsonRequest(server string, body PostSimilarRecordingsJsonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSimilarRecordingsJsonRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSimilarRecordingsJsonRequestWithBody generates requests for PostSimilarRecordingsJson with any type of body
func NewPostSimilarRecordingsJsonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/similar-recordings/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpotifyIdFromMbidJsonRequest generates requests for GetSpotifyIdFromMbidJson
func NewGetSpotifyIdFromMbidJsonRequest(server string, params *GetSpotifyIdFromMbidJsonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spotify-id-from-mbid/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recording_mbid", runtime.ParamLocationQuery, params.RecordingMbid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpotifyIdFromMbidJsonRequest calls the generic PostSpotifyIdFromMbidJson builder with application/json body
func NewPostSpotifyIdFromMbidJsonRequest(server string, body PostSpotifyIdFromMbidJsonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSpotifyIdFromMbidJsonRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSpotifyIdFromMbidJsonRequestWithBody generates requests for PostSpotifyIdFromMbidJson with any type of body
func NewPostSpotifyIdFromMbidJsonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spotify-id-from-mbid/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpotifyIdFromMetadataJsonRequest generates requests for GetSpotifyIdFromMetadataJson
func NewGetSpotifyIdFromMetadataJsonRequest(server string, params *GetSpotifyIdFromMetadataJsonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spotify-id-from-metadata/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artist_name", runtime.ParamLocationQuery, params.ArtistName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "release_name", runtime.ParamLocationQuery, params.ReleaseName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "track_name", runtime.ParamLocationQuery, params.TrackName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpotifyIdFromMetadataJsonRequest calls the generic PostSpotifyIdFromMetadataJson builder with application/json body
func NewPostSpotifyIdFromMetadataJsonRequest(server string, body PostSpotifyIdFromMetadataJsonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSpotifyIdFromMetadataJsonRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSpotifyIdFromMetadataJsonRequestWithBody generates requests for PostSpotifyIdFromMetadataJson with any type of body
func NewPostSpotifyIdFromMetadataJsonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spotify-id-from-metadata/json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetArtistCountryCodeFromArtistMbidJsonWithResponse request
	GetArtistCountryCodeFromArtistMbidJsonWithResponse(ctx context.Context, params *GetArtistCountryCodeFromArtistMbidJsonParams, reqEditors ...RequestEditorFn) (*GetArtistCountryCodeFromArtistMbidJsonResponse, error)

	// PostArtistCountryCodeFromArtistMbidJsonWithBodyWithResponse request with any body
	PostArtistCountryCodeFromArtistMbidJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistCountryCodeFromArtistMbidJsonResponse, error)

	PostArtistCountryCodeFromArtistMbidJsonWithResponse(ctx context.Context, body PostArtistCountryCodeFromArtistMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistCountryCodeFromArtistMbidJsonResponse, error)

	// GetBulkTagLookupJsonWithResponse request
	GetBulkTagLookupJsonWithResponse(ctx context.Context, params *GetBulkTagLookupJsonParams, reqEditors ...RequestEditorFn) (*GetBulkTagLookupJsonResponse, error)

	// PostBulkTagLookupJsonWithBodyWithResponse request with any body
	PostBulkTagLookupJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBulkTagLookupJsonResponse, error)

	PostBulkTagLookupJsonWithResponse(ctx context.Context, body PostBulkTagLookupJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBulkTagLookupJsonResponse, error)

	// GetSimilarRecordingsJsonWithResponse request
	GetSimilarRecordingsJsonWithResponse(ctx context.Context, params *GetSimilarRecordingsJsonParams, reqEditors ...RequestEditorFn) (*GetSimilarRecordingsJsonResponse, error)

	// PostSimilarRecordingsJsonWithBodyWithResponse request with any body
	PostSimilarRecordingsJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSimilarRecordingsJsonResponse, error)

	PostSimilarRecordingsJsonWithResponse(ctx context.Context, body PostSimilarRecordingsJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSimilarRecordingsJsonResponse, error)

	// GetSpotifyIdFromMbidJsonWithResponse request
	GetSpotifyIdFromMbidJsonWithResponse(ctx context.Context, params *GetSpotifyIdFromMbidJsonParams, reqEditors ...RequestEditorFn) (*GetSpotifyIdFromMbidJsonResponse, error)

	// PostSpotifyIdFromMbidJsonWithBodyWithResponse request with any body
	PostSpotifyIdFromMbidJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMbidJsonResponse, error)

	PostSpotifyIdFromMbidJsonWithResponse(ctx context.Context, body PostSpotifyIdFromMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMbidJsonResponse, error)

	// GetSpotifyIdFromMetadataJsonWithResponse request
	GetSpotifyIdFromMetadataJsonWithResponse(ctx context.Context, params *GetSpotifyIdFromMetadataJsonParams, reqEditors ...RequestEditorFn) (*GetSpotifyIdFromMetadataJsonResponse, error)

	// PostSpotifyIdFromMetadataJsonWithBodyWithResponse request with any body
	PostSpotifyIdFromMetadataJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMetadataJsonResponse, error)

	PostSpotifyIdFromMetadataJsonWithResponse(ctx context.Context, body PostSpotifyIdFromMetadataJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMetadataJsonResponse, error)
}

type GetArtistCountryCodeFromArtistMbidJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AreaId      float32            `json:"area_id"`
		ArtistMbid  openapi_types.UUID `json:"artist_mbid"`
		ArtistName  string             `json:"artist_name"`
		CountryCode string             `json:"country_code"`
	}
}

// Status returns HTTPResponse.Status
func (r GetArtistCountryCodeFromArtistMbidJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistCountryCodeFromArtistMbidJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArtistCountryCodeFromArtistMbidJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AreaId      float32            `json:"area_id"`
		ArtistMbid  openapi_types.UUID `json:"artist_mbid"`
		ArtistName  string             `json:"artist_name"`
		CountryCode string             `json:"country_code"`
	}
}

// Status returns HTTPResponse.Status
func (r PostArtistCountryCodeFromArtistMbidJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArtistCountryCodeFromArtistMbidJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkTagLookupJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Percent the popularity of the track in the context of the tag
		Percent       float32            `json:"percent"`
		RecordingMbid openapi_types.UUID `json:"recording_mbid"`
		Source        string             `json:"source"`
		Tag           string             `json:"tag"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBulkTagLookupJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkTagLookupJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBulkTagLookupJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Percent the popularity of the track in the context of the tag
		Percent       float32            `json:"percent"`
		RecordingMbid openapi_types.UUID `json:"recording_mbid"`
		Source        string             `json:"source"`
		Tag           string             `json:"tag"`
	}
}

// Status returns HTTPResponse.Status
func (r PostBulkTagLookupJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBulkTagLookupJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimilarRecordingsJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ArtistCreditMbids *[]openapi_types.UUID `json:"artist_credit_mbids"`
		ArtistCreditName  string                `json:"artist_credit_name"`
		CaaId             float32               `json:"caa_id"`
		CaaReleaseMbid    openapi_types.UUID    `json:"caa_release_mbid"`
		RecordingMbid     openapi_types.UUID    `json:"recording_mbid"`
		RecordingName     string                `json:"recording_name"`
		ReferenceMbid     openapi_types.UUID    `json:"reference_mbid"`
		ReleaseMbid       openapi_types.UUID    `json:"release_mbid"`
		ReleaseName       string                `json:"release_name"`
		Score             float32               `json:"score"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSimilarRecordingsJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimilarRecordingsJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSimilarRecordingsJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ArtistCreditMbids *[]openapi_types.UUID `json:"artist_credit_mbids"`
		ArtistCreditName  string                `json:"artist_credit_name"`
		CaaId             float32               `json:"caa_id"`
		CaaReleaseMbid    openapi_types.UUID    `json:"caa_release_mbid"`
		RecordingMbid     openapi_types.UUID    `json:"recording_mbid"`
		RecordingName     string                `json:"recording_name"`
		ReferenceMbid     openapi_types.UUID    `json:"reference_mbid"`
		ReleaseMbid       openapi_types.UUID    `json:"release_mbid"`
		ReleaseName       string                `json:"release_name"`
		Score             float32               `json:"score"`
	}
}

// Status returns HTTPResponse.Status
func (r PostSimilarRecordingsJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSimilarRecordingsJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpotifyIdFromMbidJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ArtistName      string             `json:"artist_name"`
		RecordingMbid   openapi_types.UUID `json:"recording_mbid"`
		ReleaseName     string             `json:"release_name"`
		SpotifyTrackIds []string           `json:"spotify_track_ids"`
		TrackName       string             `json:"track_name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSpotifyIdFromMbidJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpotifyIdFromMbidJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpotifyIdFromMbidJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ArtistName      string             `json:"artist_name"`
		RecordingMbid   openapi_types.UUID `json:"recording_mbid"`
		ReleaseName     string             `json:"release_name"`
		SpotifyTrackIds []string           `json:"spotify_track_ids"`
		TrackName       string             `json:"track_name"`
	}
}

// Status returns HTTPResponse.Status
func (r PostSpotifyIdFromMbidJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpotifyIdFromMbidJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpotifyIdFromMetadataJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ArtistName      string   `json:"artist_name"`
		ReleaseName     string   `json:"release_name"`
		SpotifyTrackIds []string `json:"spotify_track_ids"`
		TrackName       string   `json:"track_name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSpotifyIdFromMetadataJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpotifyIdFromMetadataJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpotifyIdFromMetadataJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ArtistName      string   `json:"artist_name"`
		ReleaseName     string   `json:"release_name"`
		SpotifyTrackIds []string `json:"spotify_track_ids"`
		TrackName       string   `json:"track_name"`
	}
}

// Status returns HTTPResponse.Status
func (r PostSpotifyIdFromMetadataJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpotifyIdFromMetadataJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetArtistCountryCodeFromArtistMbidJsonWithResponse request returning *GetArtistCountryCodeFromArtistMbidJsonResponse
func (c *ClientWithResponses) GetArtistCountryCodeFromArtistMbidJsonWithResponse(ctx context.Context, params *GetArtistCountryCodeFromArtistMbidJsonParams, reqEditors ...RequestEditorFn) (*GetArtistCountryCodeFromArtistMbidJsonResponse, error) {
	rsp, err := c.GetArtistCountryCodeFromArtistMbidJson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistCountryCodeFromArtistMbidJsonResponse(rsp)
}

// PostArtistCountryCodeFromArtistMbidJsonWithBodyWithResponse request with arbitrary body returning *PostArtistCountryCodeFromArtistMbidJsonResponse
func (c *ClientWithResponses) PostArtistCountryCodeFromArtistMbidJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistCountryCodeFromArtistMbidJsonResponse, error) {
	rsp, err := c.PostArtistCountryCodeFromArtistMbidJsonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistCountryCodeFromArtistMbidJsonResponse(rsp)
}

func (c *ClientWithResponses) PostArtistCountryCodeFromArtistMbidJsonWithResponse(ctx context.Context, body PostArtistCountryCodeFromArtistMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistCountryCodeFromArtistMbidJsonResponse, error) {
	rsp, err := c.PostArtistCountryCodeFromArtistMbidJson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistCountryCodeFromArtistMbidJsonResponse(rsp)
}

// GetBulkTagLookupJsonWithResponse request returning *GetBulkTagLookupJsonResponse
func (c *ClientWithResponses) GetBulkTagLookupJsonWithResponse(ctx context.Context, params *GetBulkTagLookupJsonParams, reqEditors ...RequestEditorFn) (*GetBulkTagLookupJsonResponse, error) {
	rsp, err := c.GetBulkTagLookupJson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkTagLookupJsonResponse(rsp)
}

// PostBulkTagLookupJsonWithBodyWithResponse request with arbitrary body returning *PostBulkTagLookupJsonResponse
func (c *ClientWithResponses) PostBulkTagLookupJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBulkTagLookupJsonResponse, error) {
	rsp, err := c.PostBulkTagLookupJsonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBulkTagLookupJsonResponse(rsp)
}

func (c *ClientWithResponses) PostBulkTagLookupJsonWithResponse(ctx context.Context, body PostBulkTagLookupJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBulkTagLookupJsonResponse, error) {
	rsp, err := c.PostBulkTagLookupJson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBulkTagLookupJsonResponse(rsp)
}

// GetSimilarRecordingsJsonWithResponse request returning *GetSimilarRecordingsJsonResponse
func (c *ClientWithResponses) GetSimilarRecordingsJsonWithResponse(ctx context.Context, params *GetSimilarRecordingsJsonParams, reqEditors ...RequestEditorFn) (*GetSimilarRecordingsJsonResponse, error) {
	rsp, err := c.GetSimilarRecordingsJson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSimilarRecordingsJsonResponse(rsp)
}

// PostSimilarRecordingsJsonWithBodyWithResponse request with arbitrary body returning *PostSimilarRecordingsJsonResponse
func (c *ClientWithResponses) PostSimilarRecordingsJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSimilarRecordingsJsonResponse, error) {
	rsp, err := c.PostSimilarRecordingsJsonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSimilarRecordingsJsonResponse(rsp)
}

func (c *ClientWithResponses) PostSimilarRecordingsJsonWithResponse(ctx context.Context, body PostSimilarRecordingsJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSimilarRecordingsJsonResponse, error) {
	rsp, err := c.PostSimilarRecordingsJson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSimilarRecordingsJsonResponse(rsp)
}

// GetSpotifyIdFromMbidJsonWithResponse request returning *GetSpotifyIdFromMbidJsonResponse
func (c *ClientWithResponses) GetSpotifyIdFromMbidJsonWithResponse(ctx context.Context, params *GetSpotifyIdFromMbidJsonParams, reqEditors ...RequestEditorFn) (*GetSpotifyIdFromMbidJsonResponse, error) {
	rsp, err := c.GetSpotifyIdFromMbidJson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpotifyIdFromMbidJsonResponse(rsp)
}

// PostSpotifyIdFromMbidJsonWithBodyWithResponse request with arbitrary body returning *PostSpotifyIdFromMbidJsonResponse
func (c *ClientWithResponses) PostSpotifyIdFromMbidJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMbidJsonResponse, error) {
	rsp, err := c.PostSpotifyIdFromMbidJsonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotifyIdFromMbidJsonResponse(rsp)
}

func (c *ClientWithResponses) PostSpotifyIdFromMbidJsonWithResponse(ctx context.Context, body PostSpotifyIdFromMbidJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMbidJsonResponse, error) {
	rsp, err := c.PostSpotifyIdFromMbidJson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotifyIdFromMbidJsonResponse(rsp)
}

// GetSpotifyIdFromMetadataJsonWithResponse request returning *GetSpotifyIdFromMetadataJsonResponse
func (c *ClientWithResponses) GetSpotifyIdFromMetadataJsonWithResponse(ctx context.Context, params *GetSpotifyIdFromMetadataJsonParams, reqEditors ...RequestEditorFn) (*GetSpotifyIdFromMetadataJsonResponse, error) {
	rsp, err := c.GetSpotifyIdFromMetadataJson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpotifyIdFromMetadataJsonResponse(rsp)
}

// PostSpotifyIdFromMetadataJsonWithBodyWithResponse request with arbitrary body returning *PostSpotifyIdFromMetadataJsonResponse
func (c *ClientWithResponses) PostSpotifyIdFromMetadataJsonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMetadataJsonResponse, error) {
	rsp, err := c.PostSpotifyIdFromMetadataJsonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotifyIdFromMetadataJsonResponse(rsp)
}

func (c *ClientWithResponses) PostSpotifyIdFromMetadataJsonWithResponse(ctx context.Context, body PostSpotifyIdFromMetadataJsonJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotifyIdFromMetadataJsonResponse, error) {
	rsp, err := c.PostSpotifyIdFromMetadataJson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotifyIdFromMetadataJsonResponse(rsp)
}

// ParseGetArtistCountryCodeFromArtistMbidJsonResponse parses an HTTP response from a GetArtistCountryCodeFromArtistMbidJsonWithResponse call
func ParseGetArtistCountryCodeFromArtistMbidJsonResponse(rsp *http.Response) (*GetArtistCountryCodeFromArtistMbidJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistCountryCodeFromArtistMbidJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AreaId      float32            `json:"area_id"`
			ArtistMbid  openapi_types.UUID `json:"artist_mbid"`
			ArtistName  string             `json:"artist_name"`
			CountryCode string             `json:"country_code"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostArtistCountryCodeFromArtistMbidJsonResponse parses an HTTP response from a PostArtistCountryCodeFromArtistMbidJsonWithResponse call
func ParsePostArtistCountryCodeFromArtistMbidJsonResponse(rsp *http.Response) (*PostArtistCountryCodeFromArtistMbidJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArtistCountryCodeFromArtistMbidJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AreaId      float32            `json:"area_id"`
			ArtistMbid  openapi_types.UUID `json:"artist_mbid"`
			ArtistName  string             `json:"artist_name"`
			CountryCode string             `json:"country_code"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBulkTagLookupJsonResponse parses an HTTP response from a GetBulkTagLookupJsonWithResponse call
func ParseGetBulkTagLookupJsonResponse(rsp *http.Response) (*GetBulkTagLookupJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkTagLookupJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Percent the popularity of the track in the context of the tag
			Percent       float32            `json:"percent"`
			RecordingMbid openapi_types.UUID `json:"recording_mbid"`
			Source        string             `json:"source"`
			Tag           string             `json:"tag"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBulkTagLookupJsonResponse parses an HTTP response from a PostBulkTagLookupJsonWithResponse call
func ParsePostBulkTagLookupJsonResponse(rsp *http.Response) (*PostBulkTagLookupJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBulkTagLookupJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Percent the popularity of the track in the context of the tag
			Percent       float32            `json:"percent"`
			RecordingMbid openapi_types.UUID `json:"recording_mbid"`
			Source        string             `json:"source"`
			Tag           string             `json:"tag"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSimilarRecordingsJsonResponse parses an HTTP response from a GetSimilarRecordingsJsonWithResponse call
func ParseGetSimilarRecordingsJsonResponse(rsp *http.Response) (*GetSimilarRecordingsJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSimilarRecordingsJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ArtistCreditMbids *[]openapi_types.UUID `json:"artist_credit_mbids"`
			ArtistCreditName  string                `json:"artist_credit_name"`
			CaaId             float32               `json:"caa_id"`
			CaaReleaseMbid    openapi_types.UUID    `json:"caa_release_mbid"`
			RecordingMbid     openapi_types.UUID    `json:"recording_mbid"`
			RecordingName     string                `json:"recording_name"`
			ReferenceMbid     openapi_types.UUID    `json:"reference_mbid"`
			ReleaseMbid       openapi_types.UUID    `json:"release_mbid"`
			ReleaseName       string                `json:"release_name"`
			Score             float32               `json:"score"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSimilarRecordingsJsonResponse parses an HTTP response from a PostSimilarRecordingsJsonWithResponse call
func ParsePostSimilarRecordingsJsonResponse(rsp *http.Response) (*PostSimilarRecordingsJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSimilarRecordingsJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ArtistCreditMbids *[]openapi_types.UUID `json:"artist_credit_mbids"`
			ArtistCreditName  string                `json:"artist_credit_name"`
			CaaId             float32               `json:"caa_id"`
			CaaReleaseMbid    openapi_types.UUID    `json:"caa_release_mbid"`
			RecordingMbid     openapi_types.UUID    `json:"recording_mbid"`
			RecordingName     string                `json:"recording_name"`
			ReferenceMbid     openapi_types.UUID    `json:"reference_mbid"`
			ReleaseMbid       openapi_types.UUID    `json:"release_mbid"`
			ReleaseName       string                `json:"release_name"`
			Score             float32               `json:"score"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpotifyIdFromMbidJsonResponse parses an HTTP response from a GetSpotifyIdFromMbidJsonWithResponse call
func ParseGetSpotifyIdFromMbidJsonResponse(rsp *http.Response) (*GetSpotifyIdFromMbidJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpotifyIdFromMbidJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ArtistName      string             `json:"artist_name"`
			RecordingMbid   openapi_types.UUID `json:"recording_mbid"`
			ReleaseName     string             `json:"release_name"`
			SpotifyTrackIds []string           `json:"spotify_track_ids"`
			TrackName       string             `json:"track_name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpotifyIdFromMbidJsonResponse parses an HTTP response from a PostSpotifyIdFromMbidJsonWithResponse call
func ParsePostSpotifyIdFromMbidJsonResponse(rsp *http.Response) (*PostSpotifyIdFromMbidJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpotifyIdFromMbidJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ArtistName      string             `json:"artist_name"`
			RecordingMbid   openapi_types.UUID `json:"recording_mbid"`
			ReleaseName     string             `json:"release_name"`
			SpotifyTrackIds []string           `json:"spotify_track_ids"`
			TrackName       string             `json:"track_name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpotifyIdFromMetadataJsonResponse parses an HTTP response from a GetSpotifyIdFromMetadataJsonWithResponse call
func ParseGetSpotifyIdFromMetadataJsonResponse(rsp *http.Response) (*GetSpotifyIdFromMetadataJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpotifyIdFromMetadataJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ArtistName      string   `json:"artist_name"`
			ReleaseName     string   `json:"release_name"`
			SpotifyTrackIds []string `json:"spotify_track_ids"`
			TrackName       string   `json:"track_name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpotifyIdFromMetadataJsonResponse parses an HTTP response from a PostSpotifyIdFromMetadataJsonWithResponse call
func ParsePostSpotifyIdFromMetadataJsonResponse(rsp *http.Response) (*PostSpotifyIdFromMetadataJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpotifyIdFromMetadataJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ArtistName      string   `json:"artist_name"`
			ReleaseName     string   `json:"release_name"`
			SpotifyTrackIds []string `json:"spotify_track_ids"`
			TrackName       string   `json:"track_name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
